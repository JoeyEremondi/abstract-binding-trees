open import Data.Empty.Irrelevant renaming (‚ä•-elim to ‚ä•-elimi)
open import Data.Nat using (‚Ñï; zero; suc; _<_; _‚â§_; z‚â§n; s‚â§s; _+_; _‚â§?_)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-step; +-comm; +-suc)
open import Data.List using (List; []; _‚à∑_; length; _++_)
open import Data.List.Properties using (++-identity ≥)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü© )
open import Data.Unit.Polymorphic using (‚ä§; tt)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; cong; cong‚ÇÇ; cong-app; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Agda.Primitive using (Level; lzero; lsuc)


{----------------------------------------------------------------------------
                  Well-scoped Abstract Binding Trees
 ---------------------------------------------------------------------------}

module WellScoped (Op : Set) (sig : Op ‚Üí List ‚Ñï) where

open import Var
open import Substitution using (Shiftable; Rename; ‚¶â_‚¶ä; ‚Üë; _‚Ä¢_)
open Substitution.ABTOps Op sig
    using (ABT; Arg; Args; RenameIsMap; rename; SubstIsMap; ‚ü™_‚ü´; Subst; ‚ü¶_‚üß)
open import Preserve Op sig
open import Map Op sig
open import Data.Vec using (Vec) renaming ([] to []ÃÜ; _‚à∑_ to _‚à∑ÃÜ_)
open ABTPred {I = ‚ä§} (Œª Œì x A ‚Üí x < length Œì) (Œª op vs Bs A ‚Üí ‚ä§)
  hiding (var-p; op-p; ast-p; bind-p; nil-p; cons-p)
open ABTPred {I = ‚ä§} (Œª Œì x A ‚Üí x < length Œì) (Œª op vs Bs A ‚Üí ‚ä§)
  using ()
  renaming (var-p to WF-var; op-p to WF-op; ast-p to WF-ast; bind-p to WF-bind;
            nil-p to WF-nil; cons-p to WF-cons) public

mk-list : {‚Ñì : Level} ‚Üí ‚Ñï ‚Üí List {‚Ñì} ‚ä§
mk-list 0 = []
mk-list (suc n) = tt ‚à∑ mk-list n

WF : ‚Ñï ‚Üí ABT ‚Üí Set
WF n M = mk-list n ‚ä¢ M ‚¶Ç tt

open import AbstractBindingTree Op sig using (`_; _‚¶Ö_‚¶Ü; ast; bind; nil; cons)

mk-btype : (b : ‚Ñï) ‚Üí BType ‚ä§ b
mk-btype zero = tt
mk-btype (suc b) = ‚ü® tt , (mk-btype b) ‚ü©

mk-btypes : (bs : List ‚Ñï) ‚Üí BTypes ‚ä§ bs
mk-btypes [] = tt
mk-btypes (b ‚à∑ bs) = ‚ü® mk-btype b , mk-btypes bs ‚ü©

mk-vec : {‚Ñì : Level} ‚Üí (n : ‚Ñï) ‚Üí Vec {‚Ñì} ‚ä§ n 
mk-vec zero = []ÃÜ
mk-vec (suc n) = tt ‚à∑ÃÜ (mk-vec n)

WF-arg : ‚Ñï ‚Üí {b : ‚Ñï} ‚Üí Arg b ‚Üí Set
WF-arg n {b} arg = b ‚à£ mk-list n ‚à£ mk-btype b ‚ä¢‚Çê arg ‚¶Ç tt

WF-args : ‚Ñï ‚Üí {bs : List ‚Ñï} ‚Üí Args bs ‚Üí Set 
WF-args n {bs} args = bs ‚à£ mk-list n ‚à£ mk-btypes bs ‚ä¢‚Çä args ‚¶Ç mk-vec (length bs)

len-mk-list : ‚àÄ {‚Ñì : Level} n ‚Üí length {‚Ñì} (mk-list n) ‚â° n
len-mk-list zero = refl
len-mk-list (suc n) = cong suc (len-mk-list n)

mk-btype-unique : ‚àÄ{b : ‚Ñï}{Bs : BType ‚ä§ b}
    ‚Üí Bs ‚â° mk-btype b
mk-btype-unique {zero} {tt} = refl
mk-btype-unique {suc b} {‚ü® fst , snd ‚ü©} = cong‚ÇÇ ‚ü®_,_‚ü© refl mk-btype-unique

mk-btypes-unique : ‚àÄ{bs : List ‚Ñï}{Bss : BTypes ‚ä§ bs}
    ‚Üí Bss ‚â° mk-btypes bs
mk-btypes-unique {[]} {tt} = refl
mk-btypes-unique {b ‚à∑ bs} {‚ü® fst , snd ‚ü©} =
    cong‚ÇÇ ‚ü®_,_‚ü© (mk-btype-unique {b}) mk-btypes-unique

mk-vec-unique : ‚àÄ{‚Ñì : Level}{n : ‚Ñï}{vs : Vec {‚Ñì} ‚ä§ n} ‚Üí vs ‚â° mk-vec n
mk-vec-unique {‚Ñì}{zero} {[]ÃÜ} = refl
mk-vec-unique {‚Ñì}{suc n} {v ‚à∑ÃÜ vs} = cong‚ÇÇ _‚à∑ÃÜ_ refl mk-vec-unique


module _ where
  private
    RenPres : PreserveMap RenameIsMap
    RenPres = record { ùëÉ = Œª op vs Bs A ‚Üí ‚ä§ ; _‚ä¢v_‚¶Ç_ = Œª Œì x A ‚Üí Œì ‚àã x ‚¶Ç A
              ; ‚àã‚Üí‚ä¢v-var‚Üíval = Œª x ‚Üí x ; ext-‚ä¢v = Œª ‚àãx ‚Üí ‚àãx ; ‚ä¢v0 = refl
              ; ‚ä¢v‚Üí‚ä¢ = Œª {Œì}{x}{tt} ‚àãx ‚Üí WF-var ‚àãx (‚àãx‚Üí< {‚ä§}{Œì} ‚àãx) }
    open PreserveMap RenPres using (_‚¶Ç_‚áí_)

  open PreserveMap RenPres using ()
      renaming (preserve-map to ren-preserve) public

  WFRename : ‚Ñï ‚Üí Rename ‚Üí ‚Ñï ‚Üí Set
  WFRename Œì œÅ Œî = ‚àÄ {x} ‚Üí x < Œì ‚Üí (‚¶â œÅ ‚¶ä x) < Œî

  WFRename‚ÜíœÅ‚¶Ç : ‚àÄ{Œì œÅ Œî} ‚Üí WFRename Œì œÅ Œî  ‚Üí  œÅ ‚¶Ç mk-list Œì ‚áí mk-list Œî
  WFRename‚ÜíœÅ‚¶Ç {Œì}{œÅ}{Œî} wfŒì {x}{A} ‚àãx 
      with ‚àãx‚Üí< {_}{mk-list Œì}{x} ‚àãx
  ... | x<Œì rewrite len-mk-list {lzero} Œì
      with wfŒì{x} x<Œì
  ... | x<Œî rewrite sym (len-mk-list {lzero} Œî)
      with <‚Üí‚àãx {‚ä§}{mk-list Œî} x<Œî 
  ... | ‚àãx' rewrite len-mk-list {lzero} Œî = ‚àãx' 

  WF-rename : ‚àÄ {Œì Œî œÅ M} ‚Üí WFRename Œì œÅ Œî ‚Üí WF Œì M ‚Üí WF Œî (rename œÅ M)
  WF-rename {Œì}{Œî}{œÅ}{M} wfŒì wfM = ren-preserve wfM (WFRename‚ÜíœÅ‚¶Ç {œÅ = œÅ} wfŒì)

module _ where
  private
    SubstPres : PreserveMap SubstIsMap
    SubstPres = record { ùëÉ = Œª op vs Bs A ‚Üí ‚ä§ ; _‚ä¢v_‚¶Ç_ = Œª Œì M A ‚Üí Œì ‚ä¢ M ‚¶Ç A
                  ; ‚àã‚Üí‚ä¢v-var‚Üíval = Œª {Œì} ‚àãx ‚Üí WF-var ‚àãx (‚àãx‚Üí< {‚ä§}{Œì} ‚àãx)
                  ; ext-‚ä¢v = Œª {A}{B}{Œî}{M} ‚ä¢M ‚Üí ren-preserve ‚ä¢M Œª x ‚Üí x
                  ; ‚ä¢v‚Üí‚ä¢ = Œª x ‚Üí x ; ‚ä¢v0 = Œª { {tt} ‚Üí WF-var refl (s‚â§s z‚â§n) } }
    open PreserveMap SubstPres using (_‚¶Ç_‚áí_)

  open PreserveMap SubstPres using ()
      renaming (preserve-map to sub-preserve) public

  WFSubst : ‚Ñï ‚Üí Subst ‚Üí ‚Ñï ‚Üí Set
  WFSubst Œì œÉ Œî = ‚àÄ {x} ‚Üí x < Œì ‚Üí WF Œî (‚ü¶ œÉ ‚üß x)

  WF-subst : ‚àÄ{Œì Œî œÉ M} ‚Üí WFSubst Œì œÉ Œî ‚Üí WF Œì M ‚Üí WF Œî (‚ü™ œÉ ‚ü´ M)
  WF-subst {Œì}{Œî}{œÉ}{M} wfœÉ wfM = sub-preserve wfM œÉ‚¶Ç
      where
      œÉ‚¶Ç : œÉ ‚¶Ç mk-list Œì ‚áí mk-list Œî
      œÉ‚¶Ç {x}{tt} ‚àãx
          with ‚àãx‚Üí< {‚ä§}{mk-list Œì} ‚àãx
      ... | x<Œì rewrite len-mk-list {lzero} Œì = wfœÉ{x} x<Œì

open import AbstractBindingTree Op sig
    using (Ctx; CArg; CArgs; CHole; COp; CAst; CBind; tcons; ccons; 
           plug; plug-arg; plug-args;
           ctx-depth; ctx-depth-arg; ctx-depth-args)

data WF-Ctx : ‚Ñï ‚Üí Ctx ‚Üí Set
data WF-CArg : ‚Ñï ‚Üí ‚àÄ{b} ‚Üí CArg b ‚Üí Set
data WF-CArgs : ‚Ñï ‚Üí ‚àÄ{bs} ‚Üí CArgs bs ‚Üí Set

data WF-Ctx where
  WF-hole : ‚àÄ{n} ‚Üí WF-Ctx n CHole
  WF-c-op : ‚àÄ{n}{op}{cargs : CArgs (sig op)}
     ‚Üí WF-CArgs n cargs
     ‚Üí WF-Ctx n (COp op cargs)

data WF-CArg where
  WF-c-ast : ‚àÄ{n}{C : Ctx}
     ‚Üí WF-Ctx n C
     ‚Üí WF-CArg n (CAst C)
  WF-c-bind : ‚àÄ{n}{b}{CA : CArg b}
     ‚Üí WF-CArg (suc n) {b} CA
     ‚Üí WF-CArg n (CBind {b} CA)

data WF-CArgs where
  WF-tcons : ‚àÄ{n}{b}{bs}{bs'}{A : Arg b}{cargs : CArgs bs}{eq : bs' ‚â° b ‚à∑ bs}
     ‚Üí WF-arg n A
     ‚Üí WF-CArgs n cargs
     ‚Üí WF-CArgs n (tcons {b}{bs}{bs'} A cargs eq)
  WF-ccons : ‚àÄ{n}{b}{bs}{bs'}{C : CArg b}{args : Args bs}{eq : bs' ‚â° b ‚à∑ bs}
     ‚Üí WF-CArg n C
     ‚Üí WF-args n args
     ‚Üí WF-CArgs n (ccons {b}{bs}{bs'} C args eq)

WF-plug : ‚àÄ{C : Ctx}{N : ABT}{k}
   ‚Üí WF-Ctx k C
   ‚Üí WF (k + ctx-depth C) N
   ‚Üí WF k (plug C N)
WF-plug-arg : ‚àÄ{b}{A : CArg b}{N : ABT}{k}
   ‚Üí WF-CArg k A
   ‚Üí WF (k + ctx-depth-arg A) N
   ‚Üí WF-arg k (plug-arg A N)
WF-plug-args : ‚àÄ{bs}{Cs : CArgs bs}{N : ABT}{k}
   ‚Üí WF-CArgs k Cs
   ‚Üí WF (k + ctx-depth-args Cs) N
   ‚Üí WF-args k (plug-args Cs N)

WF-plug {CHole} {N} {k} wfC wfN
    rewrite +-comm k 0 = wfN
WF-plug {COp op cargs} {N} {k} (WF-c-op wf-cargs) wfN =
    WF-op (WF-plug-args{Cs = cargs} wf-cargs wfN ) tt
WF-plug-arg {zero} {CAst C} {N} {k} (WF-c-ast wfC) wfN =
    WF-ast (WF-plug wfC wfN)
WF-plug-arg {suc n} {CBind A} {N} {k} (WF-c-bind wfA) wfN =
    WF-bind (WF-plug-arg wfA wfN')
    where
    wfN' : WF (suc k + ctx-depth-arg A) N
    wfN' rewrite +-suc k (ctx-depth-arg A) = wfN
WF-plug-args {b ‚à∑ bs} {tcons A Cs refl} {N} {k} (WF-tcons wfA wfCs) wfN =
    WF-cons wfA (WF-plug-args {Cs = Cs} wfCs wfN)
WF-plug-args {b ‚à∑ bs} {ccons C As refl} {N} {k} (WF-ccons wfC wfAs) wfN =
    WF-cons (WF-plug-arg wfC wfN) wfAs


WF? : (n : ‚Ñï) ‚Üí (M : ABT) ‚Üí Dec (WF n M)
WF-arg? : (n : ‚Ñï) ‚Üí {b : ‚Ñï} ‚Üí (A : Arg b) ‚Üí Dec (WF-arg n A)
WF-args? : (n : ‚Ñï) ‚Üí {bs : List ‚Ñï} ‚Üí (As : Args bs) ‚Üí Dec (WF-args n As)
WF? n (` x)
    with suc x ‚â§? n
... | yes x<n =
      let x<ln = subst (Œª ‚ñ° ‚Üí x < ‚ñ°) (sym (len-mk-list n)) x<n in
      yes (WF-var (<‚Üí‚àãx {‚ä§}{mk-list n} x<ln) x<ln)
WF? n (` x) | no ¬¨x<n = no G
    where G : ¬¨ WF n (` x)
          G (WF-var ‚àãx lt) =
            ¬¨x<n (subst (Œª ‚ñ° ‚Üí x < ‚ñ°) (len-mk-list n) lt)
WF? n (op ‚¶Ö args ‚¶Ü)
    with WF-args? n args
... | yes wf = yes (WF-op wf _)
... | no ¬¨wf = no G
    where G : ¬¨ WF n (op ‚¶Ö args ‚¶Ü)
          G (WF-op {Œì}{_}{_}{A}{As}{Bs} wf _)
            rewrite mk-btypes-unique {sig op}{Bs}
            | mk-vec-unique {_}{length (sig op)}{As} = ¬¨wf wf
WF-arg? n (ast M)
    with WF? n M
... | yes wf = yes (WF-ast wf)
... | no ¬¨wf = no G
    where G : ¬¨ WF-arg n (ast M)
          G (WF-ast wf) = ¬¨wf wf
WF-arg? n (bind A)
    with WF-arg? (suc n) A
... | yes wf = yes (WF-bind wf)
... | no ¬¨wf = no G
    where G : ¬¨ WF-arg n (bind A)
          G (WF-bind wf) = ¬¨wf wf

WF-args? n nil = yes WF-nil
WF-args? n (cons A As)
    with WF-arg? n A
... | no ¬¨wf = no G
    where G : ¬¨ WF-args n (cons A As)
          G (WF-cons wfA wfAs) = ¬¨wf wfA
... | yes wfA
    with WF-args? n As
... | no ¬¨wf = no G
    where G : ¬¨ WF-args n (cons A As)
          G (WF-cons wfA wfAs) = ¬¨wf wfAs
... | yes wfAs = yes (WF-cons wfA wfAs)

WF-rel : (M : ABT) {n : ‚Ñï} ‚Üí .(WF n M) ‚Üí WF n M
WF-rel M {n} wfM
    with WF? n M
... | yes wf = wf
... | no ¬¨wf = ‚ä•-elimi (¬¨wf wfM)
