import ABTPredicate
open import Agda.Primitive using (Level; lzero; lsuc)
open import Data.Empty using (‚ä•)
open import Data.List using (List; []; _‚à∑_; length; _++_)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_; z‚â§n; s‚â§s)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü© )
open import Data.Unit.Polymorphic using (‚ä§; tt)
open import Environment
open import Function using (_‚àò_)
import Substitution
open import GenericSubstitution
open import ScopedTuple
open import Data.Vec using (Vec) renaming ([] to []Ãå; _‚à∑_ to _‚à∑Ãå_)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; cong-app)
open Eq.‚â°-Reasoning
open import Var

module MapPreserve (Op : Set) (sig : Op ‚Üí List ‚Ñï) where

open import AbstractBindingTree Op sig
open import Fold Op sig
open import Map Op sig

{-------------------- MapEnv Preserves ABTPred ---------------------}

record MapEnvPreserveABTPred {V E I : Set} (M : MapEnv E V) : Set‚ÇÅ where
  field ùëâ : List I ‚Üí Var ‚Üí I ‚Üí Set
        ùëÉ : (op : Op) ‚Üí Vec I (length (sig op)) ‚Üí BTypes I (sig op) ‚Üí I ‚Üí Set
        _‚ä¢v_‚¶Ç_ : List I ‚Üí V ‚Üí I ‚Üí Set

  open MapEnv M
  open Quotable V-is-Quotable
  open ABTPredicate Op sig ùëâ ùëÉ public
 
  ùê¥ : List I ‚Üí V ‚Üí I ‚Üí Set
  ùê¥ Œì M A = ‚ä§

  _‚¶Ç_‚áí_ : E ‚Üí List I ‚Üí List I ‚Üí Set
  œÉ ‚¶Ç Œì ‚áí Œî = ‚àÄ{x A} ‚Üí Œì ‚àã x ‚¶Ç A  ‚Üí  Œî ‚ä¢v lookup œÉ x ‚¶Ç A
  
  field quote-‚ä¢v : ‚àÄ{Œì v A} ‚Üí Œì ‚ä¢v v ‚¶Ç A ‚Üí Œì ‚ä¢ ‚Äú v ‚Äù ‚¶Ç A
        ext-pres : ‚àÄ{œÉ Œì Œî A} ‚Üí œÉ ‚¶Ç Œì ‚áí Œî ‚Üí ext-env œÉ ‚¶Ç (A ‚à∑ Œì) ‚áí (A ‚à∑ Œî)

  preserve-map : ‚àÄ{M œÉ Œì Œî A}
        ‚Üí Œì ‚ä¢ M ‚¶Ç A
        ‚Üí œÉ ‚¶Ç Œì ‚áí Œî
        ‚Üí Œî ‚ä¢ map-abt œÉ M ‚¶Ç A
        
  pres-arg : ‚àÄ{b Œì Œî}{arg : Arg b}{A œÉ Bs}
        ‚Üí b ‚à£ Œì ‚à£ Bs ‚ä¢‚Çê arg ‚¶Ç A ‚Üí œÉ ‚¶Ç Œì ‚áí Œî
        ‚Üí b ‚à£ Œî ‚à£ Bs ‚ä¢‚Çê map-arg œÉ {b} arg ‚¶Ç A
  pres-args : ‚àÄ{bs Œì Œî}{args : Args bs}{As œÉ Bss}
        ‚Üí bs ‚à£ Œì ‚à£ Bss ‚ä¢‚Çä args ‚¶Ç As ‚Üí œÉ ‚¶Ç Œì ‚áí Œî
        ‚Üí bs ‚à£ Œî ‚à£ Bss ‚ä¢‚Çä map-args œÉ {bs} args ‚¶Ç As
  preserve-map {` x}{œÉ} (var-p ‚àãx ùëâx) œÉ‚¶Ç = quote-‚ä¢v (œÉ‚¶Ç ‚àãx)
  preserve-map {op ‚¶Ö args ‚¶Ü} (op-p ‚ä¢args Pop) œÉ‚¶Ç =
      op-p (pres-args ‚ä¢args œÉ‚¶Ç) Pop
  pres-arg {zero} {arg = ast M} (ast-p ‚ä¢M) œÉ‚¶Ç = ast-p (preserve-map ‚ä¢M œÉ‚¶Ç)
  pres-arg {suc b} {arg = bind arg} (bind-p {B = B}{A = A} ‚ä¢arg) œÉ‚¶Ç =
      bind-p (pres-arg ‚ä¢arg (ext-pres œÉ‚¶Ç))
  pres-args {[]} {args = nil} nil-p œÉ‚¶Ç = nil-p
  pres-args {b ‚à∑ bs} {args = cons arg args} (cons-p ‚ä¢arg ‚ä¢args) œÉ‚¶Ç =
    cons-p (pres-arg ‚ä¢arg œÉ‚¶Ç) (pres-args ‚ä¢args œÉ‚¶Ç)


{-------------------- Map Preserves ABTPred ---------------------}

record MapPreserveABTPred {V I : Set} (M : Map V) : Set‚ÇÅ where
  field ùëâ : List I ‚Üí Var ‚Üí I ‚Üí Set
        ùëÉ : (op : Op) ‚Üí Vec I (length (sig op)) ‚Üí BTypes I (sig op) ‚Üí I ‚Üí Set
        _‚ä¢v_‚¶Ç_ : List I ‚Üí V ‚Üí I ‚Üí Set

  open Map M ; open Shiftable (Map.V-is-Shiftable M)
  open Quotable V-is-Quotable
  open ABTPredicate Op sig ùëâ ùëÉ 
 
  field shift-‚ä¢v : ‚àÄ{A B Œî v} ‚Üí Œî ‚ä¢v v ‚¶Ç A ‚Üí (B ‚à∑ Œî) ‚ä¢v shift v ‚¶Ç A
        quote-‚ä¢v : ‚àÄ{Œì v A} ‚Üí Œì ‚ä¢v v ‚¶Ç A ‚Üí Œì ‚ä¢ ‚Äú v ‚Äù ‚¶Ç A
        ‚ä¢v0 : ‚àÄ{B Œî} ‚Üí (B ‚à∑ Œî) ‚ä¢v var‚Üíval 0 ‚¶Ç B
                    
  open GSubstPred (Map.V-is-Shiftable M) _‚ä¢v_‚¶Ç_ 
  open GenericSubst (Map.V-is-Shiftable M)

  ext-pres : ‚àÄ{œÉ Œì Œî A} ‚Üí œÉ ‚¶Ç Œì ‚áí Œî ‚Üí g-ext œÉ ‚¶Ç (A ‚à∑ Œì) ‚áí (A ‚à∑ Œî)
  ext-pres {œÉ} {Œì} {Œî} {A} œÉ‚¶Ç {zero} {B} refl rewrite g-ext-def œÉ = ‚ä¢v0
  ext-pres {œÉ} {Œì} {Œî} {A} œÉ‚¶Ç {suc x} {B} ‚àãx
      rewrite g-ext-def œÉ | g-inc-shift œÉ x = shift-‚ä¢v (œÉ‚¶Ç {x}{B} ‚àãx)

  PME : MapEnvPreserveABTPred GSubst-is-MapEnv
  PME = record { ùëâ = ùëâ ; ùëÉ = ùëÉ ; _‚ä¢v_‚¶Ç_ = _‚ä¢v_‚¶Ç_ ; quote-‚ä¢v = quote-‚ä¢v
               ; ext-pres = ext-pres }
  open MapEnvPreserveABTPred PME hiding (ext-pres) public

{-------------------- MapEnv Preserves FoldEnv ---------------------}

record MapEnvPreserveFoldEnv  {V·µê V·∂† Env·µê Env·∂† : Set} {‚Ñì : Level}{C·∂† : Set ‚Ñì}
  (M : MapEnv Env·µê V·µê) (F : FoldEnv Env·∂† V·∂† C·∂†) : Set (lsuc ‚Ñì)
  where
  open MapEnv {{...}} renaming (lookup to lookup·µê; ext-env to ext-env·µê)
  open FoldEnv {{...}} renaming (_,_ to _,·∂†_); open Quotable {{...}}
  instance _ : MapEnv Env·µê V·µê ; _ = M ; _ : FoldEnv Env·∂† V·∂† C·∂† ; _ = F
           _ : Quotable V·µê ; _ = V-is-Quotable
           
  open RelBind {‚Ñì}{V·∂†}{C·∂†}{V·∂†}{C·∂†} _‚â°_ _‚â°_

  _‚®ü_‚âà_ : Env·µê ‚Üí Env·∂† ‚Üí Env·∂† ‚Üí Set ‚Ñì
  œÉ ‚®ü Œ¥ ‚âà Œ≥ = ‚àÄ x ‚Üí fold Œ¥ (‚Äú lookup·µê œÉ x ‚Äù) ‚â° ret (lookup Œ≥ x)

  field op-cong : ‚àÄ op rs rs' ‚Üí zip _‚©≥_ rs rs' ‚Üí fold-op op rs ‚â° fold-op op rs'
        ext-pres : ‚àÄ{œÉ : Env·µê}{Œ¥ Œ≥ : Env·∂†}{v : V·∂†} ‚Üí œÉ ‚®ü Œ¥ ‚âà Œ≥
                ‚Üí (ext-env·µê œÉ) ‚®ü (Œ¥ ,·∂† v) ‚âà (Œ≥ ,·∂† v)

  map-preserve-fold : ‚àÄ{œÉ Œ¥ Œ≥} (M : ABT)
     ‚Üí œÉ ‚®ü Œ¥ ‚âà Œ≥
     ‚Üí fold Œ¥ (map-abt œÉ M)  ‚â° fold Œ≥ M

  mpf-arg : ‚àÄ{b}{arg : Arg b}{œÉ Œ¥ Œ≥}
     ‚Üí œÉ ‚®ü Œ¥ ‚âà Œ≥
     ‚Üí fold-arg Œ¥ (map-arg œÉ arg) ‚©≥ fold-arg Œ≥ arg
  mpf-args : ‚àÄ{bs}{args : Args bs}{œÉ Œ¥ Œ≥}
     ‚Üí œÉ ‚®ü Œ¥ ‚âà Œ≥
     ‚Üí zip _‚©≥_ (fold-args Œ¥ (map-args œÉ args)) (fold-args Œ≥ args)
  map-preserve-fold {œÉ} {Œ¥} {Œ≥} (` x) œÉ‚®üŒ¥‚âàŒ≥ = œÉ‚®üŒ¥‚âàŒ≥ x
  map-preserve-fold {œÉ} {Œ¥} {Œ≥} (op ‚¶Ö args ‚¶Ü) œÉ‚®üŒ¥‚âàŒ≥ =
      let mpf = (mpf-args {sig op}{args}{œÉ}{Œ¥}{Œ≥} œÉ‚®üŒ¥‚âàŒ≥) in
      op-cong op (fold-args Œ¥ (map-args œÉ args)) (fold-args Œ≥ args) mpf
  mpf-arg {zero} {ast M} {œÉ} {Œ¥} {Œ≥} œÉ‚®üŒ¥‚âàŒ≥ =
      map-preserve-fold M œÉ‚®üŒ¥‚âàŒ≥
  mpf-arg {suc b} {bind arg} {œÉ} {Œ¥} {Œ≥} œÉ‚®üŒ¥‚âàŒ≥ refl =
      mpf-arg {b}{arg} (ext-pres œÉ‚®üŒ¥‚âàŒ≥)
  mpf-args {[]} {nil} {œÉ} {Œ¥} {Œ≥} œÉ‚®üŒ¥‚âàŒ≥ = tt
  mpf-args {b ‚à∑ bs} {cons arg args} {œÉ} {Œ¥} {Œ≥} œÉ‚®üŒ¥‚âàŒ≥ =
      ‚ü® mpf-arg{b}{arg}{œÉ}{Œ¥}{Œ≥} œÉ‚®üŒ¥‚âàŒ≥ , mpf-args œÉ‚®üŒ¥‚âàŒ≥ ‚ü©

{-------------------- Rename Preserves FoldEnv ---------------------}

record RenamePreserveFoldEnv {Env V : Set} {‚Ñì : Level}{C : Set ‚Ñì}
  (F : FoldEnv Env V C) : Set (lsuc ‚Ñì) where
  open FoldEnv F ; open Shiftable V-is-Shiftable
  open Substitution using (Rename; ‚¶â_‚¶ä; ext; ext-0; ext-suc)
  open Substitution.ABTOps Op sig
      using (rename; ren-arg; ren-args; Rename-is-Map)

  open RelBind {‚Ñì}{V}{C}{V}{C} _‚â°_ _‚â°_
  field op-eq : ‚àÄ op rs rs' ‚Üí zip _‚©≥_ rs rs' ‚Üí fold-op op rs ‚â° fold-op op rs'
        shift·∂ú : C ‚Üí C
        shift-ret : ‚àÄ v ‚Üí shift·∂ú (ret v) ‚â° ret (shift v)

  _‚®ü_‚âà_ : Rename ‚Üí Env ‚Üí Env ‚Üí Set ‚Ñì
  œÅ ‚®ü œÉ‚ÇÅ ‚âà œÉ‚ÇÇ = ‚àÄ x ‚Üí fold œÉ‚ÇÅ (` (‚¶â œÅ ‚¶ä x)) ‚â° ret (lookup œÉ‚ÇÇ x)
  
  ext-pres : ‚àÄ{œÅ œÉ‚ÇÅ œÉ‚ÇÇ v} ‚Üí œÅ ‚®ü œÉ‚ÇÅ ‚âà œÉ‚ÇÇ ‚Üí ext œÅ ‚®ü (œÉ‚ÇÅ , v) ‚âà (œÉ‚ÇÇ , v)
  ext-pres {œÅ} {œÉ‚ÇÅ} {œÉ‚ÇÇ} {v} prem zero rewrite ext-0 œÅ
      | lookup-0 œÉ‚ÇÅ v | lookup-0 œÉ‚ÇÇ v = refl
  ext-pres {œÅ} {œÉ‚ÇÅ} {œÉ‚ÇÇ} {v} prem (suc x) rewrite ext-suc œÅ x
      | lookup-suc œÉ‚ÇÅ v (‚¶â œÅ ‚¶ä x) | lookup-suc œÉ‚ÇÇ v x =
      begin
          ret (shift (lookup œÉ‚ÇÅ (‚¶â œÅ ‚¶ä x)))
      ‚â°‚ü® sym (shift-ret _) ‚ü©
          shift·∂ú (ret (lookup œÉ‚ÇÅ (‚¶â œÅ ‚¶ä x)))
      ‚â°‚ü® cong shift·∂ú (prem x) ‚ü©
          shift·∂ú (ret (lookup œÉ‚ÇÇ x))
      ‚â°‚ü® shift-ret _ ‚ü©
          ret (shift (lookup œÉ‚ÇÇ x))
      ‚àé

  MEPFE : MapEnvPreserveFoldEnv{Var}{V}{‚Ñì = ‚Ñì}{C·∂† = C} (Map.GSubst-is-MapEnv Rename-is-Map) F
  MEPFE = record { op-cong = op-eq ; ext-pres = ext-pres }
  open MapEnvPreserveFoldEnv MEPFE using ()
    renaming (map-preserve-fold to rename-fold;
              mpf-arg to rf-arg; mpf-args to rf-args) public


{-------------------- Rename Preserves Fold ---------------------}

record RenamePreserveFold {V : Set} {‚Ñì : Level}{C : Set ‚Ñì} (F : Fold V C) : Set (lsuc ‚Ñì)
  where
  open Fold F ; open Shiftable V-is-Shiftable
  
  open RelBind {‚Ñì}{V}{C}{V}{C} _‚â°_ _‚â°_
  field op-eq : ‚àÄ op rs rs' ‚Üí zip _‚©≥_ rs rs' ‚Üí fold-op op rs ‚â° fold-op op rs'
        ret-inj : ‚àÄ {v v' : V} ‚Üí ret v ‚â° ret v' ‚Üí v ‚â° v'
        shift·∂ú : C ‚Üí C
        shift-ret : ‚àÄ v ‚Üí shift·∂ú (ret v) ‚â° ret (shift v)

  RPFE : RenamePreserveFoldEnv GSubst-is-FoldEnv
  RPFE = record { op-eq = op-eq ; shift·∂ú = shift·∂ú ; shift-ret = shift-ret }
  open RenamePreserveFoldEnv RPFE public


{-------------------- Map Preserves FoldEnv ---------------------}

{- 
   example: Fold is denotational semantics, V‚ÇÇ = Value, C‚ÇÇ = Value ‚Üí Set
            Map is substitution, V‚ÇÅ = ABT

       Env = Var ‚Üí Value
       Denotation : Env ‚Üí Value ‚Üí Set

  _`‚ä¢_‚Üì_ : Env ‚Üí Subst ‚Üí Env ‚Üí Set
  _`‚ä¢_‚Üì_ Œ¥ œÉ Œ≥ = (‚àÄ (x : Var) ‚Üí ‚Ñ∞ (‚ü¶ œÉ ‚üß x) Œ¥ (Œ≥ x))

    subst-pres : ‚àÄ {v} {Œ≥ : Env} {Œ¥ : Env} {M : Term}
      ‚Üí (œÉ : Subst)  ‚Üí  Œ¥ `‚ä¢ œÉ ‚Üì Œ≥  ‚Üí  ‚Ñ∞ M Œ≥ v
      ‚Üí ‚Ñ∞ (‚ü™ œÉ ‚ü´ M) Œ¥ v

-}

record FoldShift {Env·∂† V·∂† : Set}{‚Ñì : Level}{C·∂† : Set ‚Ñì}
  (F : FoldEnv Env·∂† V·∂† C·∂†) : Set (lsuc ‚Ñì) where
  open FoldEnv F ; open Shiftable V-is-Shiftable

  field shift·∂ú : C·∂† ‚Üí C·∂†
        shift-ret : ‚àÄ v·∂† ‚Üí shift·∂ú (ret v·∂†) ‚â° ret (shift v·∂†)
        
  open RelBind {‚Ñì}{V·∂†}{C·∂†}{V·∂†}{C·∂†}
           (Œª v v' ‚Üí v ‚â° shift v') (Œª c c' ‚Üí c ‚â° shift·∂ú c')
  
  field op-shift : ‚àÄ op {rs‚Üë rs} ‚Üí zip _‚©≥_ rs‚Üë rs
                 ‚Üí fold-op op rs‚Üë ‚â° shift·∂ú (fold-op op rs)

  fold-shift : ‚àÄ Œ¥ Œ¥‚Üë M
      ‚Üí (‚àÄ x ‚Üí lookup Œ¥‚Üë x ‚â° shift (lookup Œ¥ x))
      ‚Üí fold Œ¥‚Üë M ‚â° shift·∂ú (fold Œ¥ M)
  fold-shift-arg : ‚àÄ Œ¥ Œ¥‚Üë {b} (arg : Arg b)
      ‚Üí (‚àÄ x ‚Üí lookup Œ¥‚Üë x ‚â° shift (lookup Œ¥ x))
      ‚Üí fold-arg Œ¥‚Üë arg ‚©≥ fold-arg Œ¥ arg
  fold-shift-args : ‚àÄ (Œ¥ : Env·∂†) (Œ¥‚Üë : Env·∂†) {bs} (args : Args bs)
      ‚Üí (‚àÄ x ‚Üí lookup Œ¥‚Üë x ‚â° shift (lookup Œ¥ x))
      ‚Üí zip _‚©≥_ (fold-args Œ¥‚Üë args) (fold-args Œ¥ args)

  fold-shift Œ¥ Œ¥‚Üë (` x) Œ¥=shift rewrite (Œ¥=shift x)
      | shift-ret (lookup Œ¥ x) = refl
  fold-shift Œ¥ Œ¥‚Üë (op ‚¶Ö args ‚¶Ü) Œ¥=shift =
      op-shift op (fold-shift-args Œ¥ Œ¥‚Üë args Œ¥=shift)
  fold-shift-arg Œ¥ Œ¥‚Üë (ast M) Œ¥=shift = fold-shift Œ¥ Œ¥‚Üë M Œ¥=shift
  fold-shift-arg Œ¥ Œ¥‚Üë (bind arg) Œ¥=shift {_}{v·∂†} refl =
      fold-shift-arg (Œ¥ , v·∂†) (Œ¥‚Üë , shift v·∂†) arg G
      where
      G : ‚àÄ x ‚Üí lookup (Œ¥‚Üë , (shift v·∂†)) x
                ‚â° shift (lookup (Œ¥ , v·∂†) x)
      G zero rewrite lookup-0 Œ¥‚Üë (shift v·∂†) | lookup-0 Œ¥ v·∂† = refl
      G (suc x) rewrite lookup-suc Œ¥ v·∂† x | lookup-suc Œ¥‚Üë (shift v·∂†) x =
          cong shift (Œ¥=shift x)
  fold-shift-args Œ¥ Œ¥‚Üë nil Œ¥=shift = tt
  fold-shift-args Œ¥ Œ¥‚Üë (cons arg args) Œ¥=shift =
      ‚ü® fold-shift-arg Œ¥ Œ¥‚Üë arg Œ¥=shift , fold-shift-args Œ¥ Œ¥‚Üë args Œ¥=shift ‚ü©


record MapPreserveFoldEnv {Env·∂† V·µê V·∂† : Set}{‚Ñì : Level}{C·∂† : Set ‚Ñì}
  (M : Map V·µê) (F : FoldEnv Env·∂† V·∂† C·∂†) : Set (lsuc ‚Ñì) where
  open Map {{...}} using (V-is-Quotable; GSubst-is-MapEnv; ext-env)
  open FoldEnv {{...}} using (fold; ret; fold-op; lookup; lookup-0; lookup-suc;
      _,_; shift-env; lookup-shift)
  open Shiftable {{...}}
  open Quotable {{...}}
  instance _ : Map V·µê ; _ = M ; _ : FoldEnv Env·∂† V·∂† C·∂† ; _ = F
           _ : Shiftable V·∂† ; _ = (FoldEnv.V-is-Shiftable F)
           _ : Shiftable V·µê ; _ = (Map.V-is-Shiftable M)
           _ : Quotable V·µê ; _ = V-is-Quotable
  open Shiftable (Map.V-is-Shiftable M) using () renaming (var‚Üíval to var‚Üíval·µê) 
  
  open Substitution.ABTOps Op sig
      using (rename; ren-arg; ren-args; Rename-is-Map)

  field shift·∂ú : C·∂† ‚Üí C·∂†

  open RelBind {‚Ñì}{V·∂†}{C·∂†}{V·∂†}{C·∂†} _‚â°_ _‚â°_ renaming (_‚©≥_ to _‚©≥·∂†_)
  open RelBind {‚Ñì}{V·∂†}{C·∂†}{V·∂†}{C·∂†}
           (Œª (v v' : V·∂†) ‚Üí v ‚â° shift v') (Œª c c' ‚Üí c ‚â° shift·∂ú c') public
           
  field op-cong : ‚àÄ op rs rs' ‚Üí zip _‚©≥·∂†_ rs rs'
                ‚Üí fold-op op rs ‚â° fold-op op rs'
        var‚Üíval-‚Äú‚Äù : ‚àÄ x ‚Üí ‚Äú var‚Üíval·µê x ‚Äù ‚â° ` x
        shift-‚Äú‚Äù : ‚àÄ (v·µê : V·µê) ‚Üí ‚Äú shift v·µê ‚Äù ‚â° rename (‚Üë 1) ‚Äú v·µê ‚Äù
        shift-ret : ‚àÄ (v·∂† : V·∂†) ‚Üí shift·∂ú (ret v·∂†) ‚â° ret (shift v·∂†)
        op-shift : ‚àÄ op {rs‚Üë rs} ‚Üí zip _‚©≥_ rs‚Üë rs
                 ‚Üí fold-op op rs‚Üë ‚â° shift·∂ú (fold-op op rs)

  FS : FoldShift F
  FS = record { shift·∂ú = shift·∂ú ; shift-ret = shift-ret ; op-shift = op-shift }
  open FoldShift FS using (fold-shift)  

  RPF : RenamePreserveFoldEnv F
  RPF = record { op-eq = op-cong ; shift·∂ú = shift·∂ú ; shift-ret = shift-ret }
  open RenamePreserveFoldEnv RPF using (rename-fold)

  open GSubstAux {{...}}
  instance _ : GSubstAux {V·µê} (Map.V-is-Shiftable M) ; _ = record {}

  _‚®ü_‚âà_ : GSubst V·µê ‚Üí Env·∂† ‚Üí Env·∂† ‚Üí Set ‚Ñì
  œÉ ‚®ü Œ¥ ‚âà Œ≥ = ‚àÄ x ‚Üí fold Œ¥ (‚Äú ‚ßº œÉ ‚ßΩ x ‚Äù) ‚â° ret (lookup Œ≥ x)

  ext-pres : ‚àÄ{œÉ : GSubst V·µê}{Œ¥ Œ≥ : Env·∂†}{v : V·∂†} ‚Üí œÉ ‚®ü Œ¥ ‚âà Œ≥
                ‚Üí (ext-env œÉ) ‚®ü (Œ¥ , v) ‚âà (Œ≥ , v)
  ext-pres {œÉ}{Œ¥}{Œ≥}{v} œÉ‚®üŒ¥‚âàŒ≥ zero rewrite lookup-0 Œ≥ v
      | g-ext-def œÉ | var‚Üíval-‚Äú‚Äù 0 | lookup-0 Œ¥ v = refl
  ext-pres {œÉ}{Œ¥}{Œ≥}{v} œÉ‚®üŒ¥‚âàŒ≥ (suc x) rewrite lookup-suc Œ≥ v x
      | g-ext-def œÉ | g-inc-shift œÉ x | shift-‚Äú‚Äù (‚ßº œÉ ‚ßΩ x) =
      begin
          fold (Œ¥ , v) (rename (‚Üë 1) ‚Äú ‚ßº œÉ ‚ßΩ x ‚Äù)
      ‚â°‚ü® rename-fold ‚Äú ‚ßº œÉ ‚ßΩ x ‚Äù G ‚ü©
          fold (shift-env Œ¥) ‚Äú ‚ßº œÉ ‚ßΩ x ‚Äù
      ‚â°‚ü® fold-shift Œ¥ (shift-env Œ¥) ‚Äú ‚ßº œÉ ‚ßΩ x ‚Äù (lookup-shift Œ¥) ‚ü©
          shift·∂ú (fold Œ¥ ‚Äú ‚ßº œÉ ‚ßΩ x ‚Äù)
      ‚â°‚ü® cong shift·∂ú (œÉ‚®üŒ¥‚âàŒ≥ x) ‚ü©
          shift·∂ú (ret (lookup Œ≥ x))
      ‚â°‚ü® shift-ret _ ‚ü©
          ret (shift (lookup Œ≥ x))
      ‚àé
      where
      G : (RenamePreserveFoldEnv.MEPFE RPF MapEnvPreserveFoldEnv.‚®ü ‚Üë 1
          ‚âà (Œ¥ , v)) (shift-env Œ¥)
      G x rewrite lookup-shift Œ¥ x | lookup-suc Œ¥ v x = refl

  MEPFE : MapEnvPreserveFoldEnv GSubst-is-MapEnv F
  MEPFE = record { op-cong = op-cong ; ext-pres = ext-pres }
  open MapEnvPreserveFoldEnv MEPFE public hiding (_‚®ü_‚âà_; ext-pres)


{-------------------- Subst Preserves FoldEnv ---------------------}

{- The following too much junk for too little benefit.
   Is there an idiom that would streamline this? -}

record SubstPreserveFoldEnv {Env V : Set} {‚Ñì : Level}{C : Set ‚Ñì}
  (F : FoldEnv Env V C) : Set (lsuc ‚Ñì) where
  open FoldEnv F ; open Shiftable V-is-Shiftable
  open Substitution.ABTOps Op sig using (Subst-is-Map)

  field shift·∂ú : C ‚Üí C
  
  open RelBind {‚Ñì}{V}{C}{V}{C} _‚â°_ _‚â°_ renaming (_‚©≥_ to _‚©≥·∂†_)
  open RelBind {‚Ñì}{V}{C}{V}{C}
           (Œª v v' ‚Üí v ‚â° shift v') (Œª c c' ‚Üí c ‚â° shift·∂ú c') public

  field op-cong : ‚àÄ op rs rs' ‚Üí zip _‚©≥·∂†_ rs rs'
                ‚Üí fold-op op rs ‚â° fold-op op rs'
        shift-ret : ‚àÄ v·∂† ‚Üí shift·∂ú (ret v·∂†) ‚â° ret (shift v·∂†)
        op-shift : ‚àÄ op {rs‚Üë rs} ‚Üí zip _‚©≥_ rs‚Üë rs
                 ‚Üí fold-op op rs‚Üë ‚â° shift·∂ú (fold-op op rs)

  MPFE : MapPreserveFoldEnv Subst-is-Map F
  MPFE = record
           { shift·∂ú = shift·∂ú
           ; op-cong = op-cong
           ; var‚Üíval-‚Äú‚Äù = Œª x ‚Üí refl
           ; shift-‚Äú‚Äù = Œª v·µê ‚Üí refl
           ; shift-ret = shift-ret
           ; op-shift = op-shift
           }

{-------------------- Map Preserves Fold ---------------------}

record MapPreserveFold  {V·µê V·∂† : Set} {‚Ñì : Level}{C·∂† : Set ‚Ñì}
  (M : Map V·µê) (F : Fold V·∂† C·∂†) : Set (lsuc ‚Ñì) where
  open Map {{...}} ; open Fold {{...}} using (ret; fold-op; GSubst-is-FoldEnv)
  open Shiftable {{...}} ; open Quotable {{...}}
  instance _ : Map V·µê ; _ = M ; _ : Fold V·∂† C·∂† ; _ = F
           _ : Quotable V·µê ; _ = V-is-Quotable
           _ : Shiftable V·µê ; _ = (Map.V-is-Shiftable M)
           _ : Shiftable V·∂† ; _ = (Fold.V-is-Shiftable F)
  open Shiftable (Map.V-is-Shiftable M) using () renaming (var‚Üíval to var‚Üíval·µê)

  open Substitution.ABTOps Op sig using (rename)

  field var‚Üíval-‚Äú‚Äù : ‚àÄ x ‚Üí ‚Äú var‚Üíval·µê x ‚Äù ‚â° ` x
        shift·∂ú : C·∂† ‚Üí C·∂†
        shift-ret : ‚àÄ (v·∂† : V·∂†) ‚Üí shift·∂ú (ret v·∂†) ‚â° ret (shift v·∂†)
        shift-‚Äú‚Äù : ‚àÄ (v·µê : V·µê) ‚Üí ‚Äú shift v·µê ‚Äù ‚â° rename (‚Üë 1) ‚Äú v·µê ‚Äù
  open RelBind {‚Ñì}{V·∂†}{C·∂†}{V·∂†}{C·∂†}
           (Œª v v' ‚Üí v ‚â° shift v') (Œª c c' ‚Üí c ‚â° shift·∂ú c') public
  open RelBind {‚Ñì}{V·∂†}{C·∂†}{V·∂†}{C·∂†} _‚â°_ _‚â°_ renaming (_‚©≥_ to _‚©≥·∂†_)
           
  field op-shift : ‚àÄ op {rs‚Üë rs} ‚Üí zip _‚©≥_ rs‚Üë rs
                 ‚Üí fold-op op rs‚Üë ‚â° shift·∂ú (fold-op op rs)
        op-eq : ‚àÄ op rs rs' ‚Üí zip _‚©≥·∂†_ rs rs' ‚Üí fold-op op rs ‚â° fold-op op rs'

  MPFE : MapPreserveFoldEnv M GSubst-is-FoldEnv
  MPFE = record { shift·∂ú = shift·∂ú ; op-cong = op-eq ; var‚Üíval-‚Äú‚Äù = var‚Üíval-‚Äú‚Äù
           ; shift-‚Äú‚Äù = shift-‚Äú‚Äù ; shift-ret = shift-ret
           ; op-shift = op-shift }
  open MapPreserveFoldEnv MPFE

