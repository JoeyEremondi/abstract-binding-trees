import ABTPredicate
open import Agda.Primitive using (Level; lzero; lsuc)
open import Data.Empty using (‚ä•)
open import Data.List using (List; []; _‚à∑_; length; _++_)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_; z‚â§n; s‚â§s)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü© )
open import Data.Unit.Polymorphic using (‚ä§; tt)
open import Environment
open import Function using (_‚àò_)
import Substitution
open import GenericSubstitution
{- open import ScopedTuple -}
open import Data.Vec using (Vec) renaming ([] to []Ãå; _‚à∑_ to _‚à∑Ãå_)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; cong-app)
open Eq.‚â°-Reasoning
open import Var

module MapPreserve (Op : Set) (sig : Op ‚Üí List ‚Ñï) where

open import AbstractBindingTree Op sig
open import Fold Op sig
open import Map Op sig
open import Environment
open Shiftable {{...}}
open Quotable {{...}}
open Env {{...}}


{-------------------- MapEnv Preserves ABTPred ---------------------}

record MapPreservable (V I E : Set)
   {{_ : Shiftable V}}{{_ : Quotable V}}{{_ : Env E V}} : Set‚ÇÅ where
  field ùëâ : List I ‚Üí Var ‚Üí I ‚Üí Set
        ùëÉ : (op : Op) ‚Üí Vec I (length (sig op)) ‚Üí BTypes I (sig op) ‚Üí I ‚Üí Set
        _‚ä¢v_‚¶Ç_ : List I ‚Üí V ‚Üí I ‚Üí Set
  open ABTPredicate Op sig ùëâ ùëÉ public
  field quote-‚ä¢v : ‚àÄ{Œì v A} ‚Üí Œì ‚ä¢v v ‚¶Ç A ‚Üí Œì ‚ä¢ ‚Äú v ‚Äù ‚¶Ç A

open MapPreservable {{...}}

_‚¶Ç_‚áí_ : ‚àÄ{V I E : Set}
   {{_ : Shiftable V}}{{_ : Quotable V}}{{_ : Env E V}}
   {{_ : MapPreservable V I E}}
   ‚Üí E ‚Üí List I ‚Üí List I ‚Üí Set
_‚¶Ç_‚áí_ {V}{I}{E} œÉ Œì Œî = ‚àÄ(x : Var) (A : I) ‚Üí Œì ‚àã x ‚¶Ç A  ‚Üí  Œî ‚ä¢v ‚üÖ œÉ ‚üÜ x ‚¶Ç A


preserve-map : ‚àÄ {E V I}{Œì Œî : List I}{œÉ : E}{A : I}
   {{_ : Shiftable V}}{{_ : Env E V}}{{_ : MapPreservable V I E}}
   (M : ABT)
   ‚Üí Œì ‚ä¢ M ‚¶Ç A
   ‚Üí œÉ ‚¶Ç Œì ‚áí Œî
   ‚Üí (‚àÄ{œÉ Œì Œî A} ‚Üí œÉ ‚¶Ç Œì ‚áí Œî ‚Üí ext œÉ ‚¶Ç (A ‚à∑ Œì) ‚áí (A ‚à∑ Œî))
   ‚Üí Œî ‚ä¢ map œÉ M ‚¶Ç A

preserve-map (` x) (var-p ‚àãx ùëâx) œÉ‚¶Ç ext-pres = quote-‚ä¢v (œÉ‚¶Ç x ‚àãx)
preserve-map (op ‚¶Ö args ‚¶Ü) (op-p ‚ä¢args Pop) œÉ‚¶Ç ext-pres =
    op-p (pres-args ‚ä¢args œÉ‚¶Ç) Pop
    where  
    pres-arg : ‚àÄ{b Œì Œî}{arg : Arg b}{A œÉ Bs}
       ‚Üí b ‚à£ Œì ‚à£ Bs ‚ä¢‚Çê arg ‚¶Ç A ‚Üí œÉ ‚¶Ç Œì ‚áí Œî
       ‚Üí b ‚à£ Œî ‚à£ Bs ‚ä¢‚Çê map-arg œÉ {b} arg ‚¶Ç A
    pres-args : ‚àÄ{bs Œì Œî}{args : Args bs}{As œÉ Bss}
       ‚Üí bs ‚à£ Œì ‚à£ Bss ‚ä¢‚Çä args ‚¶Ç As ‚Üí œÉ ‚¶Ç Œì ‚áí Œî
       ‚Üí bs ‚à£ Œî ‚à£ Bss ‚ä¢‚Çä map-args œÉ {bs} args ‚¶Ç As
    pres-arg {zero} {arg = ast M} (ast-p ‚ä¢M) œÉ‚¶Ç =
        ast-p (preserve-map M ‚ä¢M œÉ‚¶Ç ext-pres)
    pres-arg {suc b} {arg = bind arg} (bind-p {B = B}{A = A} ‚ä¢arg) œÉ‚¶Ç =
        bind-p (pres-arg ‚ä¢arg (ext-pres œÉ‚¶Ç))
    pres-args {[]} {args = nil} nil-p œÉ‚¶Ç = nil-p
    pres-args {b ‚à∑ bs} {args = cons arg args} (cons-p ‚ä¢arg ‚ä¢args) œÉ‚¶Ç =
        cons-p (pres-arg ‚ä¢arg œÉ‚¶Ç) (pres-args ‚ä¢args œÉ‚¶Ç)


{-
map-pres-ext : ‚àÄ{œÉ Œì Œî A} ‚Üí œÉ ‚¶Ç Œì ‚áí Œî ‚Üí ext œÉ ‚¶Ç (A ‚à∑ Œì) ‚áí (A ‚à∑ Œî)
  

module MapPreserveABTPred {V I : Set}
  (ùëâ : List I ‚Üí Var ‚Üí I ‚Üí Set)
  (ùëÉ : (op : Op) ‚Üí Vec I (length (sig op)) ‚Üí BTypes I (sig op) ‚Üí I ‚Üí Set)
  (_‚ä¢v_‚¶Ç_ : List I ‚Üí V ‚Üí I ‚Üí Set)
  (quote-‚ä¢v : ‚àÄ{Œì v A} ‚Üí Œì ‚ä¢v v ‚¶Ç A ‚Üí Œì ‚ä¢ ‚Äú v ‚Äù ‚¶Ç A)
  (ext-pres : ‚àÄ{œÉ Œì Œî A} ‚Üí œÉ ‚¶Ç Œì ‚áí Œî ‚Üí ext œÉ ‚¶Ç (A ‚à∑ Œì) ‚áí (A ‚à∑ Œî))
  where
  open ABTPredicate Op sig ùëâ ùëÉ public

{-
  ùê¥ : List I ‚Üí V ‚Üí I ‚Üí Set
  ùê¥ Œì M A = ‚ä§
-}
  
-}

{-
{-------------------- Map Preserves ABTPred ---------------------}

record MapPreserveABTPred {V I : Set} (M : Map V) : Set‚ÇÅ where
  field ùëâ : List I ‚Üí Var ‚Üí I ‚Üí Set
        ùëÉ : (op : Op) ‚Üí Vec I (length (sig op)) ‚Üí BTypes I (sig op) ‚Üí I ‚Üí Set
        _‚ä¢v_‚¶Ç_ : List I ‚Üí V ‚Üí I ‚Üí Set

  open Map M
  open Quotable V-is-Quotable
  open ABTPredicate Op sig ùëâ ùëÉ 
 
  field shift-‚ä¢v : ‚àÄ{A B Œî v} ‚Üí Œî ‚ä¢v v ‚¶Ç A ‚Üí (B ‚à∑ Œî) ‚ä¢v shift v ‚¶Ç A
        quote-‚ä¢v : ‚àÄ{Œì v A} ‚Üí Œì ‚ä¢v v ‚¶Ç A ‚Üí Œì ‚ä¢ ‚Äú v ‚Äù ‚¶Ç A
        ‚ä¢v0 : ‚àÄ{B Œî} ‚Üí (B ‚à∑ Œî) ‚ä¢v var‚Üíval 0 ‚¶Ç B
                    
  open GSubstPred (Map.V-is-Shiftable M) _‚ä¢v_‚¶Ç_ 
  open GenericSubst (Map.V-is-Shiftable M)

  ext-pres : ‚àÄ{œÉ Œì Œî A} ‚Üí œÉ ‚¶Ç Œì ‚áí Œî ‚Üí ext-env œÉ ‚¶Ç (A ‚à∑ Œì) ‚áí (A ‚à∑ Œî)
  ext-pres {œÉ} {Œì} {Œî} {A} œÉ‚¶Ç {zero} {B} refl rewrite g-ext-def œÉ = ‚ä¢v0
  ext-pres {œÉ} {Œì} {Œî} {A} œÉ‚¶Ç {suc x} {B} ‚àãx
      rewrite g-ext-def œÉ | g-inc-shift œÉ x = shift-‚ä¢v (œÉ‚¶Ç {x}{B} ‚àãx)

  PME : MapEnvPreserveABTPred GSubst-is-MapEnv
  PME = record { ùëâ = ùëâ ; ùëÉ = ùëÉ ; _‚ä¢v_‚¶Ç_ = _‚ä¢v_‚¶Ç_ ; quote-‚ä¢v = quote-‚ä¢v
               ; ext-pres = ext-pres }
  open MapEnvPreserveABTPred PME hiding (ext-pres) public

-}
